{"ast":null,"code":"import axios from 'axios';\nvar base_url = 'http://nodeserver.mydevfactory.com:1443/';\nvar condition = navigator.onLine ? 'online' : 'offline';\nexport const Network = (endpoint, method, body) => {\n  return new Promise((resolve, reject) => {\n    if (condition === 'online') {\n      axios({\n        method,\n        url: `${base_url}${endpoint}`,\n        headers: {\n          'Content-Type': 'application/json',\n          'x-access-token': body ? body.authToken : \"\"\n        },\n        data: body\n      }).then(function (response) {\n        resolve(response.data);\n      }).catch(function (error) {\n        // console.log(\"error========>\", error);\n        // Toast.show('Something went wrong. Please try again !')\n        reject(error);\n      });\n    } else {\n      alert(\"OFFLINE\");\n    }\n  });\n};\n_c = Network;\n\nvar _c;\n\n$RefreshReg$(_c, \"Network\");","map":{"version":3,"sources":["/Users/asif/Documents/Uday/website/fit4yoursport/src/App/Services/Api.js"],"names":["axios","base_url","condition","navigator","onLine","Network","endpoint","method","body","Promise","resolve","reject","url","headers","authToken","data","then","response","catch","error","alert"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,QAAQ,GAAG,0CAAf;AACA,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,QAAnB,GAA8B,SAA9C;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,KAA4B;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIT,SAAS,KAAK,QAAlB,EAA4B;AAC1BF,MAAAA,KAAK,CAAC;AACJO,QAAAA,MADI;AAEJK,QAAAA,GAAG,EAAG,GAAEX,QAAS,GAAEK,QAAS,EAFxB;AAGJO,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,4BAAkBL,IAAI,GAAGA,IAAI,CAACM,SAAR,GAAoB;AAFnC,SAHL;AAOJC,QAAAA,IAAI,EAAEP;AAPF,OAAD,CAAL,CASGQ,IATH,CASQ,UAAUC,QAAV,EAAoB;AACxBP,QAAAA,OAAO,CAACO,QAAQ,CAACF,IAAV,CAAP;AACD,OAXH,EAYGG,KAZH,CAYS,UAAUC,KAAV,EAAiB;AACtB;AACA;AACAR,QAAAA,MAAM,CAACQ,KAAD,CAAN;AACD,OAhBH;AAiBD,KAlBD,MAkBO;AACLC,MAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AACF,GAtBM,CAAP;AAuBD,CAxBM;KAAMf,O","sourcesContent":["\nimport axios from 'axios'\nvar base_url = 'http://nodeserver.mydevfactory.com:1443/';\nvar condition = navigator.onLine ? 'online' : 'offline';\n\nexport const Network = (endpoint, method, body) => {\n  return new Promise((resolve, reject) => {\n    if (condition === 'online') {\n      axios({\n        method,\n        url: `${base_url}${endpoint}`,\n        headers: {\n          'Content-Type': 'application/json',\n          'x-access-token': body ? body.authToken : \"\"\n        },\n        data: body\n      })\n        .then(function (response) {\n          resolve(response.data)\n        })\n        .catch(function (error) {\n          // console.log(\"error========>\", error);\n          // Toast.show('Something went wrong. Please try again !')\n          reject(error)\n        });\n    } else {\n      alert(\"OFFLINE\")\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}